# https://www.asyncapi.com/tutorial.html - how I created this file
# https://github.com/asyncapi/asyncapi - Full Docs
# Documentation builder - https://github.com/asyncapi/docgen
asyncapi: '1.0.0'
info:
  title: Mediaframework - Output - API
  version: '0.0.2'
  description: Output API documented for subscribers through socket IO websockets.
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'

baseTopic: mediaframework.output.1.0

topics:
  event.playback.scenes.themes.show:
    publish:
      $ref: '#/components/messages/scenesThemesShow'
  event.playback.scenes.show:
    publish:
      $ref: '#/components/messages/scenesShow'
  event.playback.media.show:
    publish:
      $ref: '#/components/messages/mediaShow'

  event.playback.theme.set:
    publish:
      $ref: '#/components/messages/themeShow'

  event.playback.tag.matcher.set:
    publish:
      $ref: '#/components/messages/tagMatcherShow'

  event.playback.scene.show:
    publish:
      $ref: '#/components/messages/sceneShow'

  event.playback.scene.theme.show:
    publish:
      $ref: '#/components/messages/sceneThemeShow'

components:
  messages:
    auth:
      summary: Required by a client to authenticate with the web sockets
      payload:
        $ref: "#/components/schemas/authPayload"

    subscribe:
      summary: Allow a client to subscribe to topics for a given room
      payload:
        $ref: "#/components/schemas/subscribePayload"

    scenesThemesShow:
      summary: Receive an update to start showing Scene and Theme combinations.
      payload:
        $ref: "#/components/schemas/scenesThemesShowPayload"

    scenesShow:
      summary: Receive an update to start showing scenes
      payload:
        $ref: "#/components/schemas/scenesShowPayload"

    mediaShow:
      summary: Receive an update to start showing a media object
      payload:
        $ref: "#/components/schemas/mediaShowPayload"

    themeShow:
      summary: Receive an update to start showing theme
      payload:
        $ref: "#/components/schemas/themeShowPayload"

    tagMatcherShow:
      summary: Receive an update to set a local tag matcher for content filtering
      payload:
        $ref: "#/components/schemas/tagMatcherShowPayload"

    sceneShow:
      summary: Receive an update to start showing a singular scene
      payload:
        $ref: "#/components/schemas/sceneShowPayload"

    sceneThemeShow:
      summary: Receive an update to start showing a scene and theme
      payload:
        $ref: "#/components/schemas/sceneThemeShowPayload"


  # Main sticking point of the payload distributions
  ## If we keep the rooms as the primary namespace, we might need to use the wrapper of
  ### command, where the command name is the namespace + path (IE the api path, eg playback.scenes.themes.show)
  #### and the command value is one of the payloads described below.
  ## I think we will need to keep the primary namespace for client registration to individual pipes of messages.
  ## while the contents of the messages are always the same namespaces and schemas.
  schemas:

    sceneShowPayload:
      type: object
      properties:
        scene:
          type: string

    sceneThemeShowPayload:
      type: object
      properties:
        scene:
          type: string
        theme:
          type: string

    tagMatcherShowPayload:
      type: string

    themeShowPayload:
      type: object
      properties:
        theme:
          type: string

    authPayload:
      type: object
      properties:
        password:
          type: string
        token:
          type: string

    subscribePayload:
      type: string

    mediaShowPayload:
      type: object
      required:
        - _id
        - type
        - tags
      properties:
        _id:
          type: string
        type:
          type: string
        tags:
          type: string
        text:
          type: string
        style:
          type: object
        url:
          type: string

    scenesThemesShowPayload:
      type: object
      properties:
        scenes:
          type: array
          description: All the scenes ids as strings
          items:
            type: string

        themes:
          type: array
          description: All the themes as strings
          items:
            type: string

    scenesShowPayload:
      type: object
      properties:
        scenes:
          type: array
          description: All the scenes ids as strings
          items:
            type: string
